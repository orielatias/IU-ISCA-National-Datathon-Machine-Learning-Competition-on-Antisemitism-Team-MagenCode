# -*- coding: utf-8 -*-
"""training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10qTH-3E9tmm9huzDG5ohr14w9krHTjTf
"""

# ==============================================
# STEP 0 — Fix environment
# ==============================================
!pip uninstall -y transformers accelerate
!pip install -U transformers==4.41.2 accelerate==0.30.1 datasets scikit-learn --quiet

# ==============================================
# STEP 1 — Imports & Google Drive Mount
# ==============================================
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from datasets import Dataset
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_recall_fscore_support, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments

# ==============================================
# STEP 2 — Load Dataset
# ==============================================
df = pd.read_csv('/content/drive/MyDrive/csvs/GoldStandard2024.csv')
df = df[['Text', 'Biased']].dropna()
df['Biased'] = df['Biased'].astype(int)

# ==============================================
# STEP 3 — Train/Test Split
# ==============================================
train_df, test_df = train_test_split(df, test_size=0.2, stratify=df['Biased'], random_state=42)
train_dataset = Dataset.from_pandas(train_df)
test_dataset = Dataset.from_pandas(test_df)

# ==============================================
# STEP 4 — Model & Tokenizer
# ==============================================
model_name = "cardiffnlp/twitter-roberta-base-offensive"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)

# ==============================================
# STEP 5 — Preprocessing
# ==============================================
def preprocess(example):
    return tokenizer(example["Text"], padding="max_length", truncation=True, max_length=256)

train_dataset = train_dataset.map(preprocess, batched=True)
test_dataset = test_dataset.map(preprocess, batched=True)

# ==============================================
# STEP 6 — Compute Metrics
# ==============================================
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = logits.argmax(axis=-1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, predictions, average='binary')
    acc = accuracy_score(labels, predictions)
    return {'accuracy': acc, 'precision': precision, 'recall': recall, 'f1': f1}

# ==============================================
# STEP 7 — Training
# ==============================================
training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    save_strategy="epoch",
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    learning_rate=2e-5,
    weight_decay=0.01,
    logging_dir="./logs",
    load_best_model_at_end=True
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
    compute_metrics=compute_metrics
)

trainer.train()

# ==============================================
# STEP 8 — Evaluate
# ==============================================
metrics = trainer.evaluate()
print("\nFinal Evaluation Metrics:", metrics)

# Confusion Matrix
preds = trainer.predict(test_dataset)
y_true = preds.label_ids
y_pred = preds.predictions.argmax(axis=-1)

cm = confusion_matrix(y_true, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Not Antisemitic', 'Antisemitic'],
            yticklabels=['Not Antisemitic', 'Antisemitic'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

# Save Model
save_path = "/content/drive/MyDrive/csvs/antisemitism_model"
model.save_pretrained(save_path)
tokenizer.save_pretrained(save_path)
print(f"Model saved to {save_path}")